import * as React from 'react';
interface RjvProps {
    data: object;
    hideRoot?: boolean;
    keyName?: string;
    shouldExpandNode?: Function;
    path?: string[];
    onArrowClick?: Function;
    labelRenderer?: Function;
    valueRenderer?: Function;
    typeRenderer?: Function;
    arrowStyle?: React.CSSProperties;
    expandAll?: Function;
    closeAll?: Function;
}
declare class Rjv extends React.Component<RjvProps, any> {
    state: {
        isExpanded: boolean;
    };
    componentDidMount(): void;
    handleExpand: () => void;
    handleClose: () => void;
    getKeyName: () => string;
    shouldExpandNode: () => any;
    getCurrentPath: () => string[];
    handleArrowClick: () => void;
    getPassedProps: () => Pick<Readonly<{
        children?: React.ReactNode;
    }> & Readonly<RjvProps>, "shouldExpandNode" | "onArrowClick" | "labelRenderer" | "valueRenderer" | "typeRenderer" | "arrowStyle" | "expandAll" | "closeAll">;
    renderValueByType: () => {
        $type: any;
        $value: any;
    };
    getIfNendExpand: () => boolean;
    render(): any;
}
export default Rjv;
